{
  "bugs": {
    "url": "http://www.couchbase.com/issues/browse/JSCBC",
    "email": "support@couchbase.com"
  },
  "description": "The official (currently under development) node.js Client Library. Built atop libcouchbase, it aligns the libuv event model of node.js with it's own asynchronous API to allow for native-node feeling high performance development.",
  "engines": {
    "node": ">=0.8.8"
  },
  "homepage": "http://www.couchbase.com/develop",
  "keywords": [
    "couchbase",
    "libcouchbase",
    "memcached",
    "nosql",
    "json",
    "document"
  ],
  "main": "./lib/couchbase",
  "license": "Apache2",
  "name": "couchbase",
  "dependencies": {
    "bindings": "~1.0.0"
  },
  "devDependencies": {
    "async": "0.2.9",
    "longjohn": "0.2.1",
    "underscore": "1.5.1"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/couchbase/couchnode.git"
  },
  "version": "0.1.0",
  "gypfile": true,
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "contributors": [
    {
      "name": "Brett Lawson",
      "email": "brett19@gmail.com"
    },
    {
      "name": "Chris Anderson",
      "email": "jchris@apache.org"
    },
    {
      "name": "Kevin Reilly",
      "email": "kevin.reilly@touchfactor.com"
    },
    {
      "name": "Mark Everitt",
      "email": "meveritt@wizcorp.jp"
    },
    {
      "name": "Mark Nunberg",
      "email": "mnunberg@haskalah.org"
    },
    {
      "name": "Patrick Heneise",
      "email": "patrick.heneise@gmail.com"
    },
    {
      "name": "Rod Vagg",
      "email": "rod@vagg.org"
    },
    {
      "name": "Sergey Avseyev",
      "email": "sergey.avseyev@gmail.com"
    },
    {
      "name": "Trond Norbye",
      "email": "trond.norbye@gmail.com"
    },
    {
      "name": "Tugdual Grall",
      "email": "tugdual@gmail.com"
    },
    {
      "name": "markgetz",
      "email": "mark.getz@kellpro.com"
    }
  ],
  "readme": "# Couchnode - Fast and Native Node.JS Client for Couchbase\n\n\nThis library allows you to connect to a Couchbase cluster from node.js.\nIt is very fast and utilizes the binary protocol via a native node.js\naddon.\n\n## Basic installation and usage\n\nTo install this module, we'll assume you are using\n[NPM](https://npmjs.org).  However it is not as simple as a regular\nJavaScript module, as it depends on the C-library for Couchbase\nclients, [libcouchbase](https://github.com/couchbase/libcouchbase).\nLibcouchbase also powers other dynamic language clients, such as Ruby\nand PHP, so if you've worked with those clients you should feel right\nat home.\n\nFirst, you must install libcouchbase (version 2.1 or greater)\n\nOn a mac, you can use homebrew this should be as easy as running:\n\n    brew install libcouchbase\n\n\n### Building from Git\nSince you're reading this README, we're assuming you're going to be building\nfrom source. In this case, `cd` into the source root directory and run\n\n    npm install --debug\n\nIf your libcouchbase prefix is not inside the linker path, you can pass the\n`--couchbase-root` option over to `npm` like so:\n\n    npm install --debug --couchbase-root=/sources/libcouchbase/inst\n\nNote that `--couchbase-root` also sets the `RPATH` flags and assumes you are\nusing an `ELF`-based platform (i.e. not OS X). To build on OS X, edit the\nbindings.gyp to replace `-rpath` with the appropriate linker flags.\n\n\n## API description\n\n### Connecting.\n\nTo use this module, first do:\n\n    var Couchbase = require('couchbase');\n    var cb = new Couchbase.Connection({bucket: \"default\"}, function(err) { });\n\nNote that you do not need to wait for the connection callback in order to start\nperforming operations.\n\n### Dealing with keys and values\n\nFor API illustration, the best bet at the current time is [a small\nexample http hit\ncounter](https://github.com/couchbase/couchnode/tree/master/example.js). There\nis also [the test suite which shows more details.]\n(https://github.com/couchbase/couchnode/tree/master/tests)\n\nThe basic method summary is:\n\n    cb.get(key, function (err, result) {\n      console.log(\"Value for key is: \" + result.value);\n    });\n\n    cb.set(key, value, function (err, result) {\n      console.log(\"Set item for key with CAS: \" + result.cas);\n    });\n\n    // Then the similar methods of add, replace, append, prepend:\n    cb.add(key, value, function (err, result) {});\n    cb.replace(key, value, function (err, result) {});\n    cb.append(key, value, function (err, result) {});\n    cb.prepend(key, value, function (err, result) {});\n\n    // Increment or decrement a numeric value:\n    cb.incr(key, { delta: 42, initial: 20 }, function(err, result) {\n      console.log(\"New value for counter is: \" + result.value);\n    });\n    cb.decr(key, { delta: 99, default: 1024 }, function (err, result) {});\n\n    // Remove items\n    cb.remove(key, function (err, result));\n\n    // Set multiple items:\n    cb.setMulti({\n      key1: { value: value1 },\n      // You can set per-key options, like expiry as well.\n      key2: { value: value2, expiry: 1000 } },\n\n      // Use the \"spooled\" option to ensure the callback is invoked only once\n      // with the result for all the items.\n      { expiry: 300, spooled: true  },\n      function (err, results) {\n        console.dir(results);\n      }\n    );\n\n    // Get multiple items:\n    // Note we don't pass options and don't use spooled, so the callback is\n    // invoked for each key.\n    cb.getMulti([\"key1\", \"key2\", \"key3\"], null, function(err, result) {\n      console.log(\"Got result for key.. \" + result.value);\n    });\n\n## Contributing changes\n\nSee CONTRIBUTING.md",
  "readmeFilename": "README.md",
  "_id": "couchbase@0.1.0",
  "_shasum": "7ef225139e62de09cfe2ec964aad70b2a0a8d916",
  "_from": "couchbase@~0.1.0",
  "_resolved": "https://registry.npmjs.org/couchbase/-/couchbase-0.1.0.tgz"
}
